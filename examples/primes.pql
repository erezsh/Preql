//
//    Fault-tolerant Primes Calculator
//----------------------------------------
//
//  This example will produce an ever-growing list of prime numbers.
//  If run on a persistent database, it will resume running from the last point it stopped.
//
//  For example, run this from the examples folder:
//
//      preql -m primes sqlite://primes.sqlite
//
//  Then stop it (using Ctrl+C, or any other method), and run it again.
//

table primes {
    num: int
}


func find_primes() {
    // Init primes if empty
    if (not primes) {
        new primes(2)
        new primes(3)
    }

    // Get the last prime, i.e. where the program last stopped
    n = max(primes{num})

    // Search for primes, starting with the last one found
    while (true) {
        n = n + 2   // We only need to check odd numbers

        // Can 'n' be divided by any other prime?
        if (is_empty(primes[n % num == 0])) {
            new primes(n)
            commit()

            cnt = count(primes)
            print fmt("Found prime: $n, total of $cnt known primes")
        }
    }
}

find_primes()