//
//    Tree Search with BFS
//----------------------------------------
//
//  This example demonstrate how to perform a breadth-first search, up and down a tree structure.
//  To do so, it defines a bfs() function
//
//  For example, run this from the examples folder:
//
//      preql -m tree
//

import graph

// Define Tree table
table Tree {
    value: string
    parent: Tree?
}

// Initialize tree table with values
animal = new Tree("Animal", null)
mammal = new Tree("Mammal", animal)
dog = new Tree("Dog", mammal)
new Tree("Golden Retriever", dog)
new Tree("Lion", mammal)
new Tree("Fish", animal)

// Define a generic graph search function 'bfs' (copied from core.pql)
func bfs(edges: table, initial: table) {
    """Performs a breadth-first search on a graph

        Parameters:
            edges - a table of type {src: int, dst: int}, defining the edges of the graph
            initial - list[int], specifies from which nodes to start
    """
    // Use SQL's native recursion syntax, using the special $self variable
    bfs = SQL(list[int], "SELECT * FROM $initial UNION SELECT e.dst FROM $edges e JOIN $self bfs ON e.src = bfs.item")
    return SQL(list[int], "SELECT bfs.item FROM $bfs bfs")
}

// Define useful tables derived from Tree
// (these are reevaluated for each call, and so will reflect any changes to Tree)
roots = Tree[parent==null]
edges_downwards = Tree{
    src: parent
    dst: id
}
edges_upwards = Tree{
    src: id
    dst: parent
}

// Define Tree-specific search functions

func get_trees(ids: list[int]) {
    "Return a list of tree rows from a given list of ids"
    return join(_: ids.item, t: Tree.id){
        t.id
        t.value
    }
}

func find_path_to_root(initial: table) {
    "Find all nodes connecting the given nodes to the root (all ancestors)"
    path_to_root = bfs(edges_upwards, initial{id})
    return get_trees(path_to_root)
}

func find_descendants(initial: table) {
    "Find all descendants of given nodes"
    descendants_ids = bfs(edges_downwards, initial{id})[item !in initial{id}]
    return get_trees(descendants_ids)
}

func is_a(a: string, b: string) {
    "Return whether or not 'a' is a descendant of 'b'"
    initial = Tree[value==a]
    return b in find_path_to_root(initial){value}
}

func common_ancestors(a: string, b: string) {
    "Find the common ancestors of 'a' and 'b'"
    path_a = find_path_to_root(Tree[value==a])
    path_b = find_path_to_root(Tree[value==b])
    return join( a: path_a.id, b: path_b.id ){
        a.id
        a.value
    }
}


// Define test and print functions

func print_isa(a, b) {
    if (is_a(a, b)) {
        print fmt("A $a is a $b")
    } else {
        print fmt("A $a is not a $b")
    }
}

func print_most_common_ancestor(a, b) {
    mca = first_or_null(common_ancestors(a, b){value})
    if (not mca) {
        mca = "<not found>"
    }
    print fmt("The common root of $a and $b is $mca")
}

func print_hierarchy() {
    // Uses the builtin `walk_tree()` function, which is defined similarly to `bfs()`
    // This is all done with a single SQL statement.
    nodes_by_rank = graph.walk_tree(edges_downwards, roots{id}, 1000)
    print join(r: nodes_by_rank.id, t: Tree.id) {
        hierarchy: repeat(" ", r.rank*2) + t.value
    }
}

func test() {
    print_hierarchy()

    print_isa("Dog", "Animal")
    print_isa("Dog", "Mammal")
    print_isa("Fish", "Mammal")
    print_isa("Dog", "Lion")

    print ""
    print "List of mammals:"
    for (m in find_descendants(Tree[value=="Mammal"])) {
        print "  * " + m.value
    }

    print ""
    print_most_common_ancestor("Dog", "Lion")
    print_most_common_ancestor("Dog", "Mammal")
    print_most_common_ancestor("Dog", "Fish")
    print_most_common_ancestor("Dog", "Alien")
}

test()


//         Output
//--------------------------
//
//         table  =6
// ┌────────────────────────┐
// │ hierarchy              │
// ├────────────────────────┤
// │ Animal                 │
// │   Mammal               │
// │     Dog                │
// │       Golden Retriever │
// │     Lion               │
// │   Fish                 │
// └────────────────────────┘
// A Dog is a Animal
// A Dog is a Mammal
// A Fish is not a Mammal
// A Dog is not a Lion

// List of mammals:
//   * Dog
//   * Golden Retriever
//   * Lion

// The common root of Dog and Lion is Mammal
// The common root of Dog and Mammal is Mammal
// The common root of Dog and Fish is Animal
// The common root of Dog and Alien is <not found>