//
//    Movie Recommender
//  =====================
//
// This is a toy example of a naive recommender-system using Preql
//
// Setup:
//  - Download dataset: http://files.grouplens.org/datasets/movielens/ml-latest-small.zip
//  - Unzip 'ml-latest-small' to the working directory
//
// Then run the file using:
//
//    preql -f examples/movie_recommender.pql
//

table movies {
    movieId: int
    title: string
    genres: string
}

table ratings {
    userId: int
    movieId: movies.movieId
    rating: float
    timestamp: int
}

import_csv(ratings, "ml-latest-small/ratings.csv", true)
import_csv(movies, "ml-latest-small/movies.csv", true)


func recommend(liked_movie_ids) {
    // Get the ratings data for the movies that the user likes
    liked_ratings = ratings[movieId in liked_movie_ids]

    // For each rater, get the sum of their ratings.
    // Higher means more similar to the user.
    user_similarity = liked_ratings {
        userId 
          => 
        similarity_score: sum(rating)
    }

    // Get the ratings for all the movies the user hasn't seen yet
    unseen_ratings = ratings[movieId !in liked_movie_ids]

    // For each unseen rating, attach a similarity score according to the rater
    unseen_ratings_with_similarity = \
        join(
            rating: unseen_ratings.userId,
            rater: user_similarity.userId
        ) {
            rater.similarity_score
            ...rating
        }

    // Aggregate the score per movie, weighted by the similarity
    // between the user and the rater
    movie_score = unseen_ratings_with_similarity {
        movieId
          => 
        score: sum(similarity_score * rating)
    }

    return movie_score order{ ^score }
}


func test() {
    likes = [
        1   // Toy Story
        2   // Jumanji
        32  // Twelve Monkeys
        215 // Before Sunrise
        223 // Clerks
        296 // Pulp Fiction
        344 // Ace Ventura: Pet Detective
        442 // Demolition Man
    ]

    r = recommend(likes)

    print "Top 5 recommended movies:"
    print "-------------------------"
    print join(_: r, m:movies) { Movie: "* " + m.title } [..5]

    // Outputs:
    //
    //     Top 5 recommended movies:
    //     -------------------------
    //                     table  =5
    //     ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
    //     ┃ Movie                                       ┃
    //     ┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
    //     │ * Shawshank Redemption, The (1994)          │
    //     │ * Forrest Gump (1994)                       │
    //     │ * Silence of the Lambs, The (1991)          │
    //     │ * Matrix, The (1999)                        │
    //     │ * Star Wars: Episode IV - A New Hope (1977) │
    //     └─────────────────────────────────────────────┘
    //
}

test()