?start: _NL? _INDENT? stmts _DEDENT?

stmts: stmt+
?stmt: table_def | func_def | add_row

add_row: "add" name "(" arguments ")" as_? _NL
arguments: molecule ("," molecule)* ","?

as_: "as" name
// assigns: assign ("," assign)* ","?
// assign: (name "=")? atom

table_def: "table" name ":" _NL _INDENT table_def_stmt+ _DEDENT
?table_def_stmt: col_def
col_def: name ":" type typemod? ["->" name] _NL
type: name
typemod: PK | NULLABLE

func_def: name func_params? "=" expr _NL
func_params: "(" name ("," name)* ")"

?query: molecule query_func+

?query_func : selection
            | projection
            | order
            | groupby
            | query_user_func

selection: "[" [compare ("," compare)*] "]"
projection: "{" named_expr ("," named_expr)* "}"
order: "order" "(" (order_asc|order_desc)+ ")"
groupby: "groupby" "(" name+ ")"
query_user_func: ":" func_call
order_asc: "+"? expr
order_desc: "-" expr

// groupby: "groupby" _refs
// _refs: ref ("," ref)*


?compare: molecule compare_op molecule

?expr: arith_expr

?arith_expr: expr ARITH_OP molecule
           | molecule

ARITH_OP: "+" | "*"

!compare_op: "<" | ">" | "=" | "!=" | "<>"
?molecule: atom
     | func_call
     | identifier
     | array
     | query
     | "(" expr ")"

array: "[" molecule ("," molecule)* "]"

func_call: name func_args
func_args: "(" _func_args ")"
_func_args: named_expr ("," named_expr)*
          |

named_expr: [name "="] expr

?atom: number
      | STRING -> string
      | "null" -> null
      | range

number: SIGNED_FLOAT | SIGNED_INT

range: SIGNED_INT? ".." SIGNED_INT
     | SIGNED_INT ".." SIGNED_INT?


identifier: name ("." name)*
name: NAME

PK: "pk"
NULLABLE: "?"
COMMENT: /#[^\n]*/
// _NL: /\n+/
_NL: ( /\r?\n[\t ]*/ | COMMENT )+

DECIMAL: INT "." INT
       | INT "." /(?![.])/
       | "." INT

// float = /-?\d+(\.\d+)?([eE][+-]?\d+)?/
_EXP: ("e"|"E") SIGNED_INT
FLOAT: INT _EXP
     | DECIMAL _EXP?
SIGNED_FLOAT: ["+"|"-"] FLOAT
SIGNED_INT: ["+"|"-"] INT


%import common.CNAME -> NAME
%import common.WS_INLINE
%import common.INT
%import common.ESCAPED_STRING -> STRING
%ignore WS_INLINE
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT
%declare _INDENT _DEDENT

