?start: _NL? _INDENT? stmts _DEDENT?

stmts: stmt+
?stmt: table_def | func_def | add_row

add_row: "add" name "(" arguments ")" [as_] _NL
arguments: molecule ("," molecule)* ","?

as_: "as" name
// assigns: assign ("," assign)* ","?
// assign: (name "=")? atom

table_def: "table" name ":" _NL _INDENT table_def_stmt+ _DEDENT
?table_def_stmt: col_def
col_def: name ":" type [typemod] ["->" name] _NL
type: name
typemod: PK | NULLABLE

func_def: name [func_params] "=" expr _NL
func_params: "(" name ("," name)* ")"

sel_exprs: expr ("," expr)*
selection: molecule "[" sel_exprs "]"

projection: molecule "{" proj_exprs ["=>" proj_exprs] "}"
proj_exprs: named_expr ("," named_expr)*


?expr: compare

?compare: compare compare_op arith_expr
        | arith_expr

?arith_expr: arith_expr arith_op molecule
           | molecule

!arith_op: "+" | "*"

!compare_op: "<" | ">" | "=" | "!=" | "<>" | ">=" | "<="
?molecule: atom
     | func_call
     | getattr
     | array
     | selection
     | projection
     | ref
     | "(" expr ")"
     | "-" molecule -> neg
     | "^" molecule -> desc

array: "[" molecule ("," molecule)* "]"

func_call: molecule func_args
func_args: "(" _func_args ")"
_func_args: named_expr ("," named_expr)*
          |

named_expr: [name ":"] expr

?atom: SIGNED_INT -> int
      | SIGNED_FLOAT -> float
      | STRING -> string
      | "null" -> null
      | range

range: SIGNED_INT? ".." SIGNED_INT
     | SIGNED_INT ".." SIGNED_INT?


getattr: molecule "." name
name: NAME
ref: name

PK: "pk"
NULLABLE: "?"
COMMENT: /#[^\n]*/
// _NL: /\n+/
_NL: ( /\r?\n[\t ]*/ | COMMENT )+

DECIMAL: INT "." INT
       | INT "." /(?![.])/
       | "." INT

// float = /-?\d+(\.\d+)?([eE][+-]?\d+)?/
_EXP: ("e"|"E") SIGNED_INT
FLOAT: INT _EXP
     | DECIMAL _EXP?
SIGNED_FLOAT: ["+"|"-"] FLOAT
SIGNED_INT: ["+"|"-"] INT


%import common.CNAME -> NAME
%import common.WS_INLINE
%import common.INT
%import common.ESCAPED_STRING -> STRING
%ignore WS_INLINE
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT
%declare _INDENT _DEDENT

