?start: _NL? _INDENT? stmts _DEDENT?

stmts: stmt+
?stmt: table_def | func_def | add_row

add_row: "add" name "(" arguments ")" as_? _NL
arguments: molecule ("," molecule)* ","?

as_: "as" name
// assigns: assign ("," assign)* ","?
// assign: (name "=")? atom

table_def: "table" name ":" _NL _INDENT table_def_stmt+ _DEDENT
?table_def_stmt: col_def
col_def: name ":" type typemod? ["->" name] _NL
type: name
typemod: PK | NULLABLE

func_def: name func_params? "=" expr _NL
func_params: "(" name ("," name)* ")"

?query: molecule selection projection?
      | molecule selection? projection

?query2: molecule projection selection

selection: "[" [compare ("," compare)*] "]"

// groupby: "groupby" _refs
// _refs: ref ("," ref)*

projection: "{" func_arg ("," func_arg)* "}"

?compare: molecule compare_op molecule

?expr: arith_expr

?arith_expr: expr ARITH_OP molecule
           | molecule

ARITH_OP: "+"

!compare_op: "<" | ">" | "=" | "!=" | "<>"
?molecule: atom
     | func_call
     | identifier
     | array
     | query | query2
     | "(" expr ")"

array: "[" molecule ("," molecule)* "]"

func_call: name func_args
func_args: "(" [func_arg ("," func_arg)*] ")"
func_arg: [name "="] expr

?atom: NUMBER -> number
      | STRING -> string
      | "null" -> null


identifier: name ("." name)*
name: NAME

PK: "pk"
NULLABLE: "?"
COMMENT: /#[^\n]*/
// _NL: /\n+/
_NL: ( /\r?\n[\t ]*/ | COMMENT )+


%import common.CNAME -> NAME
%import common.WS_INLINE
%import common.NUMBER
%import common.ESCAPED_STRING -> STRING
%ignore WS_INLINE
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT
%declare _INDENT _DEDENT

