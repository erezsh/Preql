stmts: _NL? stmt+
?stmt: (table_def | struct_def | func_def | set_value | insert | print | if_stmt | return_stmt | throw | try_catch | expr _NL) //| add_row

table_def: "table" name ("{" _sep? col_defs? "}" | "=" expr)_NL
col_defs: (col_def _sep)* col_def _sep?
col_def: name ":" coltype ["->" expr] ["=" expr]
?coltype: type
        | m2m
type: name [typemod]
m2m: "[" type "]"

struct_def: "struct" name "{" _sep? member_defs? "}" _NL
member_defs: (member_def _sep)* member_def _sep?
member_def: name ":" type


typemod: PK | NULLABLE

func_def: "func" name func_params ("=" expr _NL | codeblock _NL)
try_catch: "try" codeblock _NL? "catch" "(" expr ")" codeblock _NL
if_stmt: "if" "(" expr ")" codeblock (_NL | _NL? "else" codeblock _NL)
codeblock: "{" _NL? stmt* "}"
return_stmt: "return" expr _NL
throw: "throw" expr _NL
set_value: atom "=" expr _NL
print: "print" expr _NL
func_params: "(" (param ("," param)*)? ")"
param: name [":" type] ["=" expr]   // TODO type? default value?
insert: name "+=" expr _NL

_sep: "," | "," _NL | _NL
expr_list: "[" _NL? (expr _sep)* expr _NL? "]"
selection: molecule expr_list
slice: molecule "[" range "]"

projection: molecule "{" _NL? proj_exprs _NL? "}"
          | molecule "{" _NL? proj_exprs _NL? "=>" _NL? proj_exprs _NL? "}" -> projection_grouped
          | molecule "{" "=>" _NL? proj_exprs "}" -> projection_grouped_nokeys
          | molecule "{" proj_exprs _NL? "=>" "}" -> projection_grouped_novalues

proj_exprs: named_expr (_sep named_expr)* _sep?

expr_list2: (expr _sep)* expr -> expr_list
order: molecule "order" "{" _NL? expr_list2 _NL? "}"
update: molecule "update" "{" _NL? proj_exprs _NL? "}"
delete: molecule "delete" expr_list


?expr: or_test //contains | like

// like: molecule "~" molecule

!comp_op: "<"|">"|"=="|">="|"<="|"<>"|"!="|"in"|"^in" //|"is"|"is" "not"

?or_test: and_test ("or" and_test)*
?and_test: not_test ("and" not_test)*
?not_test: "not" not_test -> not
         | compare
?compare: (compare comp_op)? like
?like: (like "~")? add_expr
?add_expr: (add_expr add_op)? term
?term: (term mul_op)? power
?factor: ("+" | "-")* molecule
?power: molecule ("**" factor)?

!add_op: "+"|"-" | "&" | "|"
!mul_op: "*"|"/"|"%"|"//"

?molecule: atom
     | func_call
     | list
     | selection
     | projection
     | slice
     | order
     | update
     | delete
     | "(" _NL? expr _NL? ")"
     | "-" molecule -> neg
     | "^" molecule -> desc
     | new
     | one
     | const

?atom: var
     | getattr

one: "one" [NULLABLE] molecule

list: "[" _NL? (expr (_sep expr)* _NL?)? "]"

new: "new" name _func_args
   | _GET_OR_NEW name _func_args -> get_or_new

_GET_OR_NEW.10: "new?"

func_call: molecule _func_args
_func_args: "(" func_args ")"
func_args: (named_expr ("," named_expr)*)?

named_expr: [name ":"] expr

?const: SIGNED_INT -> int
      | SIGNED_FLOAT -> float
      | STRING -> string
      | "null" -> null
      | ellipsis
     //  | range

range: [molecule] ".." molecule
     | molecule ".." [molecule]

ellipsis: "..."



getattr: [molecule] "." name
name: NAME
var: name

PK: "pk"
NULLABLE: "?"
COMMENT: /#[^\n]*/
_NL: ( /\r?\n[\t ]*/ | COMMENT )+

DECIMAL: INT "." INT
       | INT "." /(?![.])/
       | "." INT

_EXP: ("e"|"E") SIGNED_INT
FLOAT: INT _EXP
     | DECIMAL _EXP?
SIGNED_FLOAT: ["+"|"-"] FLOAT
SIGNED_INT: ["+"|"-"] INT


%import common.CNAME -> NAME
%import common.WS_INLINE
%import common.INT
%import common.ESCAPED_STRING -> STRING
%ignore WS_INLINE
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT
